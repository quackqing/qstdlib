# 项目名称
project(test)

message(STATUS "+++++++++++++++ START test +++++++++++++++++++++++++")

set(TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR})

set(CMAKE_INCLUDE_CURRENT_DIR ON)


# 设置生成动态库和静态库
if(WIN32)
  # 设置库和可执行文件的输出文件
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${DEV_RUNTIME_OUTPUT_DIR_DEBUG})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${DEV_LIBRARY_OUTPUT_DIR_DEBUG})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${DEV_ARCHIVE_OUTPUT_DIR_DEBUG})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${DEV_RUNTIME_OUTPUT_DIR_RELEASE})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${DEV_LIBRARY_OUTPUT_DIR_RELEASE})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${DEV_ARCHIVE_OUTPUT_DIR_RELEASE})
else(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
  # 设置库和可执行文件的输出文件
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DEV_RUNTIME_OUTPUT_DIR})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DEV_LIBRARY_OUTPUT_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DEV_ARCHIVE_OUTPUT_DIR})
endif()

file(GLOB TEST_HEADER ${TEST_DIR}/*.h ${TEST_DIR}/*.hpp ${TEST_DIR}/*.tpp)
file(GLOB TEST_SOURCE ${TEST_DIR}/*.c ${TEST_DIR}/*.cc ${TEST_DIR}/*.cpp ${TEST_DIR}/*.cxx ${TEST_DIR}/*.ipp)


include_directories(
        ${TEST_DIR}
)

link_directories(
)

add_executable(
        ${PROJECT_NAME}
        ${TEST_HEADER}
        ${TEST_SOURCE}
)

target_link_libraries(
        ${PROJECT_NAME}
)